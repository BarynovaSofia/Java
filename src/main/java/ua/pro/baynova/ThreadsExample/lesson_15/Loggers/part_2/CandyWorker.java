package ua.pro.baynova.ThreadsExample.lesson_15.Loggers.part_2;

import java.util.Random;

public class CandyWorker implements Runnable {
    private final String name;
    private final SimpleLogger logger;
    private final Random random = new Random();

    public CandyWorker(String name, SimpleLogger logger){
        this.name = name;
        this.logger = logger;
    }

    @Override
    public void run() {
        logger.info(name + ": –ù–∞—á–∏–Ω–∞–µ—Ç —É–ø–∞–∫–æ–≤–∫—É –∫–æ–Ω—Ñ–µ—Ç—ã");
        logger.debug(name + ": –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∞—à–∏–Ω—É...");

        try {
            Thread.sleep(random.nextInt(1000));

            int event = random.nextInt(10);

            if (event < 6){
                logger.info(name + ": –£–ø–∞–∫–æ–≤–∞–ª –∫–æ–Ω—Ñ–µ—Ç—É —É—Å–ø–µ—à–Ω–æ üç¨");
            } else if (event < 8) {
                logger.warn(name + ": –û–±—ë—Ä—Ç–∫–∞ –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Ä–≤–∞–Ω–∞ ‚ö†Ô∏è");
            } else if (event < 9) {
                logger.error(name + ": –û—à–∏–±–∫–∞ —É–ø–∞–∫–æ–≤–∫–∏ ‚ùå");
            } else {
                logger.fatal(name + ": –ó–∞–≤–æ–¥—Å–∫–æ–π –ø–æ–∂–∞—Ä! üî• –°—Ä–æ—á–Ω–æ —ç–≤–∞–∫—É–∞—Ü–∏—è!");
            }
        } catch (InterruptedException e){
            logger.error(name + ": –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞");
            Thread.currentThread().interrupt();
        }
    }
}
