package ua.pro.baynova.ThreadsExample.lesson_8;

import java.util.concurrent.*;

public class ReportPrinter {

    private final ExecutorService executor;

    public ReportPrinter(ExecutorService executor) {
        this.executor = executor;
    }

    public void printReports() {
        executor.execute(() -> {
            System.out.println("üñ®Ô∏è execute(): –ü–µ—á–∞—Ç–∞—é –æ—Ç—á—ë—Ç...");
            if (true) throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—á–∞—Ç–∏ —á–µ—Ä–µ–∑ execute");
        });

        Future<?> future = executor.submit(() -> {
            System.out.println("üñ®Ô∏è submit(): –ü–µ—á–∞—Ç–∞—é –æ—Ç—á—ë—Ç...");
            if (true) throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—á–∞—Ç–∏ —á–µ—Ä–µ–∑ submit");
        });

        try {
            future.get();
        } catch (ExecutionException e) {
            System.out.println("‚ùó –ü–æ–π–º–∞–ª–∏ –æ—à–∏–±–∫—É –∏–∑ submit(): " + e.getCause().getMessage());
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    public void shutdown() {
        executor.shutdown();
    }
}
