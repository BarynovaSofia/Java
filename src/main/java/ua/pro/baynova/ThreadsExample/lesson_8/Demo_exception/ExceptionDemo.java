package ua.pro.baynova.ThreadsExample.lesson_8.Demo_exception;

import java.util.concurrent.*;

public class ExceptionDemo {

    private final ExecutorService executor;

    public ExceptionDemo(ExecutorService executor) {
        this.executor = executor;
    }

    public void runTasks() {
        Callable<String> goodTask = () -> "‚úÖ –í—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!";
        Callable<String> badTask = () -> {
            throw new IllegalArgumentException("üí• –£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!");
        };

        Future<String> success = executor.submit(goodTask);
        Future<String> failure = executor.submit(badTask);

        try {
            System.out.println("–†–µ–∑—É–ª—å—Ç–∞—Ç goodTask: " + success.get());
        } catch (Exception e) {
            System.out.println("goodTask - –æ—à–∏–±–∫–∞: " + e);
        }

        try {
            System.out.println("–†–µ–∑—É–ª—å—Ç–∞—Ç badTask: " + failure.get());
        } catch (ExecutionException e) {
            System.out.println("‚ùó ExecutionException: " + e);
            System.out.println("üéØ getCause(): " + e.getCause());
            System.out.println("üìù getMessage(): " + e.getCause().getMessage());
        } catch (InterruptedException e) {
            System.out.println("–ü–æ—Ç–æ–∫ –ø—Ä–µ—Ä–≤–∞–Ω");
        }
    }

    public void shutdown() {
        executor.shutdown();
    }
}