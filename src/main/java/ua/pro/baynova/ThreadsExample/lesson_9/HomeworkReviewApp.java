package ua.pro.baynova.ThreadsExample.lesson_9;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.*;

public class HomeworkReviewApp {
    public static void main(String[] args) {
        runHomeworkCheck();
    }

    public static void runHomeworkCheck() {
        ExecutorService executor = Executors.newFixedThreadPool(3);

        Sleeper realSleeper = millis -> Thread.sleep(millis);

        List<Callable<Void>> tasks = Arrays.asList(
                new HomeworkCheckTask("–ê–Ω—è", 2, realSleeper),
                new HomeworkCheckTask("–ò–≥–æ—Ä—å", 2, realSleeper),
                new HomeworkCheckTask("–õ–µ–Ω–∞", 5, realSleeper),
                new HomeworkCheckTask("–û–ª–µ–≥", 5, realSleeper),
                new HomeworkCheckTask("–¢–∞–Ω—è", 4, realSleeper)
        );

        System.out.println("üìò –î–∞—ë–º 6 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–¥–∞–Ω–∏–π...");

        try {
            for (Callable<Void> task : tasks) {
                executor.submit(task);
            }

            executor.shutdown();

            if (!executor.awaitTermination(6, TimeUnit.SECONDS)) {
                System.out.println("‚ùó–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –≤–æ–≤—Ä–µ–º—è. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—Å—ë.");
                List<Runnable> notFinished = executor.shutdownNow();
                for (Runnable task : notFinished) {
                    System.out.println("‚õî –ü—Ä–µ—Ä–≤–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: " + task);
                }
            } else {
                System.out.println("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –≤–æ–≤—Ä–µ–º—è!");
            }

        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            System.out.println("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –≤–Ω–µ—à–Ω–µ.");
        }

        System.out.println("üîµ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
    }
}
